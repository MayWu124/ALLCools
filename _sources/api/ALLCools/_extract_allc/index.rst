:py:mod:`ALLCools._extract_allc`
================================

.. py:module:: ALLCools._extract_allc


Module Contents
---------------

.. py:function:: _merge_cg_strand(in_path, out_path)

   Merge strand after extract context step in extract_allc (and only apply on CG), so no need to check context.


.. py:function:: _check_strandness_parameter(strandness) -> str


.. py:function:: _check_out_format_parameter(out_format, binarize=False) -> Tuple[str, Callable[[list], str]]


.. py:function:: _merge_gz_files(file_list, output_path)

   Merge the small chunk files generated by _extract_allc_parallel, remove the small files after merge


.. py:function:: _extract_allc_parallel(allc_path, output_prefix, mc_contexts, strandness, output_format, chrom_size_path, cov_cutoff, cpu, chunk_size=100000000, tabix=True)

   Parallel extract_allc on region level
   Then parallel merge region chunk files to the final output in order
   Same input output as extract_allc, but will generate a bunch of small files during running
   Don't use this on small files


.. py:function:: extract_allc(allc_path: str, output_prefix: str, mc_contexts: Union[str, list], chrom_size_path: str, strandness: str = 'both', output_format: str = 'allc', region: str = None, cov_cutoff: int = 9999, tabix: bool = True, cpu=1, binarize=False)

   Extract information (strand, context) from 1 ALLC file.
   Save to several different format.

   :param allc_path: {allc_path_doc}
   :param output_prefix: Path prefix of the output ALLC file.
   :param mc_contexts: {mc_contexts_doc}
   :param strandness: {strandness_doc}
   :param output_format: Output format of extracted information, possible values are:
                         1. allc: keep the allc format
                         2. bed5: 5-column bed format, chrom, pos, pos, mc, cov
   :param chrom_size_path: {chrom_size_path_doc}
                           If chrom_size_path provided, will use it to extract ALLC with chrom order,
                           but if region provided, will ignore this.
   :param region: {region_doc}
   :param cov_cutoff: {cov_cutoff_doc}
   :param tabix: Whether to generate tabix if format is ALLC, only set this to False from _extract_allc_parallel
   :param cpu: {cpu_basic_doc}
               This function parallel on region level and will generate a bunch of small files if cpu > 1.
               Do not use cpu > 1 for single cell region count. For single cell data, parallel on cell level is better.
   :param binarize: {binarize_doc}

   :returns:
   :rtype: A list of output file paths, not include index files.


